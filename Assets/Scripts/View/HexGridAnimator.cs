using UnityEngine;using UnityEngine.UI;using UnityEngine.Assertions;using System;using System.Linq;using System.Collections;using System.Collections.Generic;public class HexGridAnimator : MonoBehaviour {    [SerializeField] private SpriteRenderer hexPrefab;    [SerializeField] private Transform hexParent;    private MonoBehaviourPooler<IntVector2, SpriteRenderer> hexes;    private void Awake()    {        hexes = new MonoBehaviourPooler<IntVector2, SpriteRenderer>(hexPrefab,                                                                    hexParent,                                                                    (c, h) => h.transform.localPosition = HexGrid.HexToWorld(c));    }    public IEnumerator FadeInColors(float duration,                                     Dictionary<IntVector2, Color> colors)    {        float time = 0;        var cells = colors.Keys.Concat(hexes.Shortcuts);        var prev = hexes.Pairs.ToDictionary(p => p.Key, p => p.Value.color);        var next = hexes.Pairs.ToDictionary(p => p.Key, p => p.Value.color);        foreach (IntVector2 cell in new List<IntVector2>(colors.Keys))        {            if (prev.ContainsKey(cell))            {                next[cell] = prev[cell] + colors[cell];            }            else            {                prev[cell] = Color.clear;                next[cell] = colors[cell];            }        }        hexes.SetActive(next.Keys);        while (time < duration)        {            float u = time / duration;            hexes.MapActive((c, h) => h.color = Color.Lerp(prev[c], next[c], u));            time += Time.deltaTime;            yield return null;        }    }    public IEnumerator FadeAndClear(float duration)    {        float time = 0;        var original = hexes.Pairs.ToDictionary(p => p.Key, p => p.Value.color);        while (time < duration)        {            float u = time / duration;            hexes.MapActive((c, h) => h.color = Color.Lerp(original[c], Color.clear, u));            time += Time.deltaTime;            yield return null;        }        hexes.Clear();    }}